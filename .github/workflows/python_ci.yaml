name: Python CI

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/python_prepare
      - name: Run mypy
        run: poetry run mypy

  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: ./.github/actions/python_prepare
      - name: Run pytest
        run: poetry run pytest tests

  pytest-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Extract environment variables for Docker container
        # No variables required right now, add them here if needed.
        run: |
          echo "" >> .env 
      - name: Build Dockerimage
        run: make build
      - name: Run pytest in Docker
        run: make tests-docker

  test-build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56
        with:
          push: false

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/python_prepare
      - name: Check with black
        run: poetry run black --check .

  autoflake:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/python_prepare
      - name: Check with autoflake
        run: |
          poetry run autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive .
          git diff --exit-code --quiet || exit 1

  isort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/python_prepare
      - name: Check with isort
        run: |
          poetry run isort --profile black .
          git diff --exit-code --quiet || exit 1

  cleanup-ghcr-images:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Cleanup old GHCR images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ghcr_images=$(gh api -H "Accept: application/vnd.github.v3+json" /orgs/gnosis/packages/container/labs-api/versions | jq -r '.[] | select(.created_at < (now - 86400 | todate)) | .id')
          for image_id in $ghcr_images; do
            tags=$(gh api -H "Accept: application/vnd.github.v3+json" /orgs/gnosis/packages/container/labs-api/versions/$image_id | jq -r '.metadata.container.tags[]')
            if [[ ! " ${tags[@]} " =~ " main " ]]; then
              echo "Deleting image with ID: $image_id"
              gh api --silent --method DELETE "/orgs/gnosis/packages/container/labs-api/versions/$image_id"
            else
              echo "Skipping image with ID: $image_id as it is tagged as main"
            fi
          done
